{"version":3,"sources":["logo.svg","component/Team.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","BASE_URL","Team","useState","teams","setTeams","useEffect","axios","get","then","res","console","log","data","catch","err","className","map","team","key","team_id","src","logo_url","alt","name","wins","losses","rating","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2JAAAA,EAAOC,QAAU,IAA0B,kC,8ICGrCC,EAAW,gCA6DFC,MA3Df,WAAiB,IAAD,EACYC,mBAAS,IADrB,mBACPC,EADO,KACAC,EADA,KAkBd,OAfAC,qBAAU,WAUR,OATAC,IACGC,IAAIP,EAAW,SACfQ,MAAK,SAAAC,GACJC,QAAQC,IAAIF,EAAIG,MAChBR,EAASK,EAAIG,SAEdC,OAAM,SAAAC,GACLJ,QAAQC,IAAIG,MAET,eAGN,IAGD,6BACE,yBAAKC,UAAU,OACZZ,EAAMa,KAAI,SAAAC,GAAI,OACb,yBAAKF,UAAU,aAAaG,IAAKD,EAAKE,SACpC,yBAAKJ,UAAU,QACb,yBAAKA,UAAU,cACb,yBAAKA,UAAU,QAAQK,IAAKH,EAAKI,SAAUC,IAAI,eAEjD,yBAAKP,UAAU,gBACb,wBAAIA,UAAU,cACZ,8BAAOE,EAAKM,OAEd,yBAAKR,UAAU,iBACb,yBAAKA,UAAU,kCACb,2BAAIE,EAAKO,KAAOP,EAAKQ,QACrB,iCAGF,yBAAKV,UAAU,mCACb,2BAAIE,EAAKO,MACT,iCAEF,yBAAKT,UAAU,iCACb,2BAAIE,EAAKQ,QACT,iCAEF,yBAAKV,UAAU,oCACb,2BAAIE,EAAKS,QACT,2CCjCLC,MAdf,WACE,OACE,yBAAKZ,UAAU,OACb,6BACE,wBAAIA,UAAU,UAAd,eAEA,6BACE,kBAAC,EAAD,UCAUa,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM/B,MAAK,SAAAgC,GACjCA,EAAaC,kB","file":"static/js/main.72a5b3f2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\n\nconst BASE_URL = \"https://api.opendota.com/api/\";\n\nfunction Team() {\n  const [teams, setTeams] = useState([]);\n\n  useEffect(() => {\n    axios\n      .get(BASE_URL + \"teams\")\n      .then(res => {\n        console.log(res.data);\n        setTeams(res.data);\n      })\n      .catch(err => {\n        console.log(err);\n      });\n    return () => {\n      //cleanup some stuff\n    };\n  }, []);\n\n  return (\n    <div>\n      <div className=\"row\">\n        {teams.map(team => (\n          <div className=\"col s12 m3\" key={team.team_id}>\n            <div className=\"card\">\n              <div className=\"card-image\">\n                <img className=\"image\" src={team.logo_url} alt=\"team logo\" />\n              </div>\n              <div className=\"card-content\">\n                <h1 className=\"team-title\">\n                  <span>{team.name}</span>\n                </h1>\n                <div className=\"row team-stat\">\n                  <div className=\"col m3 blue-text text-darken-2\">\n                    <p>{team.wins + team.losses}</p>\n                    <p>P</p>\n                  </div>\n\n                  <div className=\"col m3 green-text text-darken-2\">\n                    <p>{team.wins}</p>\n                    <p>W</p>\n                  </div>\n                  <div className=\"col m3 red-text text-darken-2\">\n                    <p>{team.losses}</p>\n                    <p>L</p>\n                  </div>\n                  <div className=\"col m3 orange-text text-darken-2\">\n                    <p>{team.rating}</p>\n                    <p>R</p>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default Team;\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport Team from \"./component/Team\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div>\n        <h3 className=\"center\">DOTA 2 WIKI</h3>\n        \n        <div>\n          <Team />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}