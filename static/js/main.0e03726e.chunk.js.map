{"version":3,"sources":["logo.svg","component/TeamDetail.js","component/Team.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","BASE_URL","TeamDetail","props","useState","team","setTeam","teamPlayers","setTeamPlayers","teamHeroes","setTeamHeroes","useEffect","console","log","clearTeamPlayers","clearTeamHeroes","fetchTeamHeroes","team_id","fetchTeamPlayers","teamId","axios","get","then","res","data","catch","err","className","onClick","onClose","src","logo_url","alt","name","wins","losses","rating","map","player","is_current_team_member","games_played","hero","localized_name","Team","initialTeam","teams","setTeams","key","onTeamDetail","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0e03726e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\n\nconst BASE_URL = \"https://api.opendota.com/api/\";\n\nfunction TeamDetail(props) {\n  const [team, setTeam] = useState(props.team);\n\n  const [teamPlayers, setTeamPlayers] = useState([]);\n\n  const [teamHeroes, setTeamHeroes] = useState([]);\n\n  useEffect(() => {\n    console.log(\"TeamDetail\", props);\n    clearTeamPlayers();\n    clearTeamHeroes();\n\n    fetchTeamHeroes(team.team_id);\n    fetchTeamPlayers(team.team_id);\n    setTeam(team);\n    return () => {};\n  }, []);\n\n  const fetchTeamPlayers = teamId => {\n    axios\n      .get(BASE_URL + \"teams/\" + teamId + \"/players\")\n      .then(res => {\n        console.log(\"Players\", res.data);\n        setTeamPlayers(res.data);\n      })\n      .catch(err => {\n        console.log(err);\n      });\n  };\n\n  const fetchTeamHeroes = teamId => {\n    axios\n      .get(BASE_URL + \"teams/\" + teamId + \"/heroes\")\n      .then(res => {\n        console.log(\"Heroes\", res.data);\n        setTeamHeroes(res.data);\n      })\n      .catch(err => {\n        console.log(err);\n      });\n  };\n\n  const clearTeamPlayers = () => {\n    setTeamPlayers([]);\n  };\n  const clearTeamHeroes = () => {\n    setTeamHeroes([]);\n  };\n\n  return (\n    <div>\n      <div>\n        <div className=\"overlay\" onClick={props.onClose}></div>\n        <div className=\"row team-detail center\">\n          <div className=\"card team-detail-box\">\n            <div className=\"team-detail-box-image\">\n              <img\n                className=\"team-detail-image\"\n                src={team.logo_url}\n                alt=\"team logo\"\n              />\n            </div>\n            <h4 className=\"team-detail-name\">{team.name}</h4>\n            <div className=\"row team-detail-info\">\n              <div className=\"col m6 row team-stat\">\n                <h5>Stat</h5>\n                <div className=\"col m3 blue-text text-darken-2\">\n                  <p>{team.wins + team.losses}</p>\n                  <p>P</p>\n                </div>\n\n                <div className=\"col m3 green-text text-darken-2\">\n                  <p>{team.wins}</p>\n                  <p>W</p>\n                </div>\n                <div className=\"col m3 red-text text-darken-2\">\n                  <p>{team.losses}</p>\n                  <p>L</p>\n                </div>\n                <div className=\"col m3 orange-text text-darken-2\">\n                  <p>{team.rating}</p>\n                  <p>R</p>\n                </div>\n              </div>\n              <div className=\"col m6 team-detail-players\">\n                <h5>Players</h5>\n                <div className=\"row team-players\">\n                  {teamPlayers.map(player => {\n                    return (\n                      player.name !== null &&\n                      player.name !== \" \" &&\n                      player.is_current_team_member && (\n                        <div className=\"col m4 team-player\">\n                          <h6>{player.name}</h6>\n                          <small>{player.games_played} played</small>\n                        </div>\n                      )\n                    );\n                  })}\n                </div>\n              </div>\n              <div className=\"col m12 team-detail-heroes\">\n                <h5>Heroes</h5>\n                <div className=\"row team-heroes\">\n                  {teamHeroes.map(hero => (\n                    <div className=\"card\">\n                      <div className=\"col m2 team-hero\">\n                        <h6>{hero.localized_name}</h6>\n                        <small>{hero.games_played} played</small>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default TeamDetail;\n","import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\n\nimport TeamDetail from \"./TeamDetail\";\n\nconst BASE_URL = \"https://api.opendota.com/api/\";\n\nfunction Team() {\n  const initialTeam = {\n    name: \"\",\n    team_id: 0\n  };\n  const [teams, setTeams] = useState([]);\n  const [team, setTeam] = useState(initialTeam);\n\n  useEffect(() => {\n    axios\n      .get(BASE_URL + \"teams\")\n      .then(res => {\n        console.log(\"Team\", res.data);\n        setTeams(res.data);\n      })\n      .catch(err => {\n        console.log(err);\n      });\n    return () => {};\n  }, []);\n\n  const onTeamDetail = team => {\n    setTeam(team);\n  };\n\n  const hideTeamDetail = () => {\n    setTeam(initialTeam);\n  };\n\n  return (\n    <div>\n      {team.name !== \"\" && <TeamDetail team={team} onClose={hideTeamDetail} />}\n      <div className=\"row team-list\">\n        {teams.map(team => (\n          <div>\n            {team.name !== \"\" && (\n              <div\n                className=\"col s12 m2 team-box\"\n                key={team.team_id}\n                onClick={() => onTeamDetail(team)}\n              >\n                <div className=\"card\">\n                  <div className=\"card-image\">\n                    <img\n                      className=\"image\"\n                      src={team.logo_url}\n                      alt=\"team logo\"\n                    />\n                  </div>\n                  <div className=\"card-content\">\n                    <h1 className=\"team-title\">\n                      <span>{team.name}</span>\n                    </h1>\n                    <div className=\"row team-stat\">\n                      <div className=\"col m6 blue-text text-darken-2\">\n                        <p>{team.wins + team.losses}</p>\n                        <p>P</p>\n                      </div>\n\n                      <div className=\"col m6 green-text text-darken-2\">\n                        <p>{team.wins}</p>\n                        <p>W</p>\n                      </div>\n                      <div className=\"col m6 red-text text-darken-2\">\n                        <p>{team.losses}</p>\n                        <p>L</p>\n                      </div>\n                      <div className=\"col m6 orange-text text-darken-2\">\n                        <p>{team.rating}</p>\n                        <p>R</p>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            )}\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default Team;\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport Team from \"./component/Team\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div>\n        <h3 className=\"center\">DOTA 2 PRO TEAM</h3>\n        \n        <div>\n          <Team />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}